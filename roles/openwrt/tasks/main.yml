---
- name: Set the name of all programs
  set_fact:
    all_programs:
    - v2ray
    - shadowsocks-libev

- name: Sanity check
  assert:
    that:
      - enable_service != 'yes' or (program in all_programs and server is defined)

- name: Set opkg packages to install
  set_fact:
    opkg_packages:
      - coreutils
      - luci
      - bash
      - zsh
      - python3
      - unzip
      - ipset
      - git
      - git-http
      - ca-bundle
      - curl
      - wget
      - https_dns_proxy
      - shadowsocks-client
      - shadowsocks-libev-config
      - shadowsocks-libev-ss-local
      - shadowsocks-libev-ss-redir
      - shadowsocks-libev-ss-rules
      - shadowsocks-libev-ss-server
      - shadowsocks-libev-ss-tunnel
      - iptables-mod-conntrack-extra

- name: Randomly select doh servers
  set_fact:
    doh_servers:
      "{{ (doh_servers | shuffle)[:number_of_doh_servers_to_use] }}"
    doh_servers_using_proxy:
      "{{ (doh_servers_using_proxy | shuffle)[:number_of_doh_servers_using_proxy_to_use] }}"

- name: Randomly select dns servers
  set_fact:
    global_dns_servers:
      "{{ (global_dns_servers | shuffle)[:number_of_global_dns_servers_to_use] }}"
    china_dns_servers:
      "{{ (china_dns_servers | shuffle)[:number_of_china_dns_servers_to_use] }}"

- name: Randomly select v2ray dokodemo door dns servers
  set_fact:
    v2ray_dns_dokodemo_door_ports:
      "{{ (range(10053, 10053 + v2ray_upstream_dns_servers|length) | list | shuffle)[:number_of_v2ray_upstream_dns_servers_to_use] }}"

- name: Update opkg packages
  shell: |
    opkg update
  when: (update == "yes")

- name: Install opkg packages
  shell: |
    opkg install {{ opkg_packages | join(' ') }}
    opkg install dnsmasq-full --force-overwrite

- name: Ensure directories exists
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - /etc/v2ray
    - /etc/shadowsocks-libev
    - /etc/dnsmasq.d
    - /opt/conf.d/shadowsocks-libev
    - /opt/conf.d/v2ray
    - /opt/bin
    - /usr/local/bin
    - /opt/tmp
    - /etc/crontabs
    - "{{ routing_rules_directory }}"
  async: 60
  poll: 0

- name: Copy china ip list
  copy:
    src: "{{ china_ip_list_filename }}"
    dest: "{{ routing_rules_directory }}/{{ china_ip_list_filename }}"
    force: no

- name: Get China IP List
  get_url:
    url: https://raw.githubusercontent.com/LisonFan/china_ip_list/master/china_ipv4_list
    dest: "{{ routing_rules_directory }}/{{ china_ip_list_filename }}"
  when: (update == "yes")

- name: Generate ss_spec ipset
  template:
    src: ss_spec.ipset.j2
    dest: "{{ routing_rules_directory }}/ss_spec.ipset"

- name: Generate doh server list
  template:
    src: doh_servers.j2
    dest: "{{ routing_rules_directory }}/{{ doh_servers_file }}"

- name: Generate directly connecting domain list
  template:
    src: directly_connecting_domains.j2
    dest: "{{ routing_rules_directory }}/{{ directly_connecting_domains_file }}"

- name: Remove old https_dns_proxy config
  shell: |
    while uci -q delete https_dns_proxy.@https_dns_proxy[0]; do :; done

- name: Change https_dns_proxy config
  shell: |
    uci set https_dns_proxy.dns{{ index }}="https_dns_proxy"
    uci set https_dns_proxy.dns{{ index }}.listen_addr="0.0.0.0"
    uci set https_dns_proxy.dns{{ index }}.listen_port="{{ 10052 - index}}"
    uci set https_dns_proxy.dns{{ index }}.user="nobody"
    uci set https_dns_proxy.dns{{ index }}.group="nogroup"
    uci set https_dns_proxy.dns{{ index }}.url_prefix="{{ upstream_server }}"
  loop: "{{ (['https://' + server|default('dns.google.com') + '/resolve?'] + (doh_servers | map('regex_replace', '$', '/dns-query?') | map('regex_replace', '^', 'https://') | list) + doh_servers_using_proxy) | unique }}"
  loop_control:
    index_var: index
    loop_var: upstream_server

- name: Commit https_dns_proxy config changes
  shell: |
    uci commit https_dns_proxy
  notify: reload https_dns_proxy

- name: Set domains to be resolved with China dns servers
  set_fact:
    domains_to_be_resolved_with_china_dns_servers: "{{ domains_to_be_resolved_with_china_dns_servers + [cloudflare_domain] }}"
  when: cloudflare_domain is defined

- name: Sanitize domains_to_be_resolved_with_china_dns_servers
  set_fact:
    domains_to_be_resolved_with_china_dns_servers: "{{ (domains_to_be_resolved_with_china_dns_servers + [server|default('example.com')] + doh_servers + directly_connecting_domain_list) | unique }}"

- name: Create dnsmasq china list
  shell: "bash <(curl -L -s https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/install.sh)"
  args:
    executable: "/bin/bash"
  when: (update == "yes")

- name: Create dnsmasq.conf
  template:
    src: dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
  notify: restart dnsmasq

- name: Copy update_dnsmasq_rules.sh
  template:
    src: update_dnsmasq_rules.sh.j2
    dest: /usr/local/bin/update_dnsmasq_rules.sh
    mode: 0755
    force: yes

- name: Set crontab for update_dnsmasq_rules.sh
  cron:
    cron_file: /etc/crontabs/update_dnsmasq_rules
    user: root
    name: "update_dnsmasq_rules"
    minute: "11"
    hour: "5,2"
    job: /usr/local/bin/update_dnsmasq_rules.sh
  notify: start cron

- name: Stop services if not enable_service
  shell: |
    [ -x "/etc/init.d/{{ item }}-redir" ] && "/etc/init.d/{{ item }}-redir" stop
  # For some unfathomable reason, the following does not work.
  # service:
  #   name: "{{ item }}-redir"
  #   state: stopped
  loop: "{{ all_programs }}"
  when: enable_service != 'yes'

- name: End play if not enable_service
  meta: end_play
  when: enable_service != 'yes'

- name: Check v2ray exists
  stat:
    path: "/opt/v2ray/v2ray"
  register: v2ray_stat_result
  when: program == 'v2ray'

- name: Check ss-nat exists
  stat:
    path: "/usr/local/bin/ss-nat"
  register: ssnat_stat_result

- name: Download v2ray
  include_role:
    name: v2ray-client
  vars:
    v2ray_dir: /opt/v2ray
    v2ray_update: "{{ update }}"
  when: (program == 'v2ray') and ((v2ray_stat_result.stat.exists == False) or (update == "yes"))

- name: Download ss-nat
  get_url:
    url: https://raw.githubusercontent.com/shadowsocks/shadowsocks-libev/master/src/ss-nat
    dest: /usr/local/bin
    mode: 0755
    force: yes
  when: (ssnat_stat_result.stat.exists == False) or (update == "yes")

- name: Create items in init.d
  template:
    src: "{{ item }}.j2"
    dest: "/etc/init.d/{{ item }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - v2ray-redir
    - shadowsocks-libev-redir

- name: Stop other services
  shell: |
    [ -x "/etc/init.d/{{ item }}-redir" ] && "/etc/init.d/{{ item }}-redir" stop
  loop: "{{ all_programs | difference([program]) }}"
  notify: "restart {{ program }}-redir"

- name: Copy config to /opt
  copy:
    src: "./artifacts/{{ item }}-{{ server }}-config.json"
    dest: "/opt//opt/conf.d/{{ item }}/"
    force: yes
  loop: "{{ all_programs | intersect([program]) }}"

- name: Copy config to /etc
  copy:
    src: "./artifacts/{{ item }}-{{ server }}-config.json"
    dest: "/etc/{{ item }}/config.json"
    force: yes
  notify: "restart {{ item }}-redir"
  loop: "{{ all_programs | intersect([program]) }}"
